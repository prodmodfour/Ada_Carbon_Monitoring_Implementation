from flask import Flask, render_template_string, jsonify, request
from prometheus_client import make_wsgi_app, Gauge
from werkzeug.middleware.dispatcher import DispatcherMiddleware
import requests
import time
import threading
from datetime import datetime, timedelta


PROMETHEUS_URL = "https://host-172-16-100-248.nubes.stfc.ac.uk" 

CPU_POWER_IDLE = 50  
CPU_POWER_MAX  = 250 

ENERGY_METRIC_QUERY = f"""
    (
        (
            {CPU_POWER_MAX} - {CPU_POWER_IDLE}
        )
        *
        avg(1 - rate(node_cpu_seconds_total{{mode="idle"}}[5m]))
        +
        {CPU_POWER_IDLE}
    ) / 2000
"""

CARBON_INTENSITY = Gauge('carbon_intensity_gco2_per_kwh', 'Current Carbon intensity of electricity in gCO2/kWh')
CARBON_INTENSITY_INDEX = Gauge('carbon_intensity_index', 'Current Carbon intensity index')
GENERATION_MIX = Gauge('generation_mix_percent', 'Percentage of electricity generated by fuel type', ['fuel'])

def fetch_and_export_uk_data():
    """
    Fetches the latest UK-wide carbon intensity and generation mix data
    and updates the Prometheus metrics for export. Runs in a background thread.
    """
    while True:
        try:
            intensity_response = requests.get('https://api.carbonintensity.org.uk/intensity')
            intensity_response.raise_for_status()
            intensity_data = intensity_response.json()['data'][0]['intensity']

            CARBON_INTENSITY.set(intensity_data['actual'])
            index_mapping = {"very low": 1, "low": 2, "moderate": 3, "high": 4, "very high": 5}
            CARBON_INTENSITY_INDEX.set(index_mapping.get(intensity_data['index'], 0))

            generation_response = requests.get('https://api.carbonintensity.org.uk/generation')
            generation_response.raise_for_status()
            generation_mix = generation_response.json()['data']['generationmix']

            for gen_type in generation_mix:
                GENERATION_MIX.labels(fuel=gen_type['fuel']).set(gen_type['perc'])
            print("Successfully updated UK-wide carbon metrics for export.")
        except requests.exceptions.RequestException as e:
            print(f"Error fetching UK-wide data from Carbon Intensity API: {e}")
        
        time.sleep(900)


app = Flask(__name__)

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UK Carbon Intensity & Your Footprint</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .card {
            background-color: #ffffff;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .intensity-card { border-left: 5px solid; }
        .very-low { border-color: #22c55e; } .low { border-color: #84cc16; }
        .moderate { border-color: #facc15; } .high { border-color: #f97316; }
        .very-high { border-color: #ef4444; }
        #analysis-chart-container { position: relative; height: 400px; width: 100%; }
        .tooltip-info {
            background-color: rgba(0,0,0,0.7);
            color: white;
            padding: 3px 6px;
            border-radius: 4px;
            font-size: 0.8rem;
            margin-left: 8px;
            cursor: help;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">
    <div class="container mx-auto p-4 md:p-8 max-w-6xl">
        <h1 class="text-3xl font-bold mb-6 text-center">UK Carbon Intensity & Your Footprint</h1>
        
        <div class="mb-4 border-b border-gray-200">
            <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="myTab" role="tablist">
                <li class="mr-2" role="presentation">
                    <button class="inline-block p-4 border-b-2 rounded-t-lg" id="dashboard-tab" type="button" role="tab" aria-controls="dashboard" aria-selected="true">Your Footprint Analysis</button>
                </li>
                <li class="mr-2" role="presentation">
                    <button class="inline-block p-4 border-b-2 border-transparent rounded-t-lg hover:text-gray-600 hover:border-gray-300" id="uk-data-tab" type="button" role="tab" aria-controls="uk-data" aria-selected="false">Live UK Grid Status</button>
                </li>
            </ul>
        </div>

        <div id="tabContent">
            <div id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                <div id="analysis-container" class="card">
                    <h2 class="text-2xl font-semibold mb-4 flex items-center">
                        Your 24-Hour Carbon Footprint
                        <span class="tooltip-info" title="This is an estimate based on your server's CPU usage, as direct power monitoring is not available.">ESTIMATED</span>
                    </h2>
                    <div id="analysis-content" class="text-center"><p class="text-lg">Loading your usage data...</p></div>
                    <div id="analysis-chart-container" class="mt-6">
                        <canvas id="analysisChart"></canvas>
                    </div>
                </div>
            </div>

            <div id="uk-data" class="hidden" role="tabpanel" aria-labelledby="uk-data-tab">
                <div id="uk-data-container"><div class="text-center"><p class="text-lg">Loading live UK grid data...</p></div></div>
            </div>
        </div>

        <div class="mt-8 text-center text-sm text-gray-500">
            <p>Personal usage data from your Prometheus instance. UK Grid data from <a href="https://carbonintensity.org.uk/" target="_blank" class="text-blue-500 hover:underline">National Grid ESO</a>.</p>
            <p>Exporter metrics available at <a href="/metrics" class="text-blue-500 hover:underline">/metrics</a>.</p>
        </div>
    </div>

    <script>
        let analysisChartInstance;

        function getIntensityColor(index, opacity = 1) {
            const colors = {
                "very low": `rgba(34, 197, 94, ${opacity})`, "low": `rgba(132, 204, 22, ${opacity})`,
                "moderate": `rgba(250, 204, 21, ${opacity})`, "high": `rgba(249, 115, 22, ${opacity})`,
                "very high": `rgba(239, 68, 68, ${opacity})`
            };
            return colors[index] || `rgba(156, 163, 175, ${opacity})`;
        }
        
        function renderAnalysisChart(data) {
            const ctx = document.getElementById('analysisChart').getContext('2d');
            if (analysisChartInstance) analysisChartInstance.destroy();
            analysisChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(d => new Date(d.from).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })),
                    datasets: [{
                        label: 'Your Estimated Carbon Footprint (gCO₂)',
                        data: data.map(d => d.footprint_gco2.toFixed(2)),
                        backgroundColor: data.map(d => getIntensityColor(d.intensity_index, 0.7)),
                        borderColor: data.map(d => getIntensityColor(d.intensity_index, 1)),
                        borderWidth: 1,
                        yAxisID: 'y'
                    }, {
                        label: 'UK Carbon Intensity (gCO₂/kWh)',
                        data: data.map(d => d.intensity_actual),
                        type: 'line',
                        borderColor: '#ef4444',
                        backgroundColor: 'transparent',
                        yAxisID: 'y1',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    scales: {
                        y: { type: 'linear', display: true, position: 'left', title: { display: true, text: 'Your Footprint (gCO₂)' } },
                        y1: { type: 'linear', display: true, position: 'right', title: { display: true, text: 'UK Intensity (gCO₂/kWh)' }, grid: { drawOnChartArea: false } }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) label += ': ';
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y;
                                        if (context.dataset.yAxisID === 'y') label += ' gCO₂';
                                        if (context.dataset.yAxisID === 'y1') label += ' gCO₂/kWh';
                                    }
                                    const dataPoint = data[context.dataIndex];
                                    if (context.dataset.yAxisID === 'y') {
                                        return [label, `Est. Usage: ${dataPoint.usage_kwh.toFixed(3)} kWh`];
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }

        async function fetchPersonalAnalysis() {
            const contentEl = document.getElementById('analysis-content');
            try {
                const response = await fetch('/calculate_footprint');
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to fetch analysis data.');
                }
                const data = await response.json();
                if (data.error) throw new Error(data.error);

                const totalFootprint = data.total_footprint_kg.toFixed(2);
                const bestTime = data.best_time ? new Date(data.best_time.from).toLocaleTimeString() : 'N/A';
                const worstTime = data.worst_time ? new Date(data.worst_time.from).toLocaleTimeString() : 'N/A';

                contentEl.innerHTML = `
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                        <div>
                            <p class="text-lg text-gray-600">Total Est. Footprint (24h)</p>
                            <p class="text-4xl font-bold">${totalFootprint} <span class="text-2xl">kgCO₂</span></p>
                        </div>
                        <div>
                            <p class="text-lg text-gray-600">Best Time to Use Energy</p>
                            <p class="text-4xl font-bold text-green-600">${bestTime}</p>
                        </div>
                        <div>
                            <p class="text-lg text-gray-600">Worst Time to Use Energy</p>
                            <p class="text-4xl font-bold text-red-600">${worstTime}</p>
                        </div>
                    </div>`;
                renderAnalysisChart(data.details);
            } catch (error) {
                console.error("Failed to fetch personal analysis:", error);
                contentEl.innerHTML = `<p class="text-red-500">Could not load your analysis: ${error.message}<br><br>This usually means the Prometheus query failed. Please ensure your Prometheus server at ${PROMETHEUS_URL} is accessible and has the 'node_cpu_seconds_total' metric.</p>`;
            }
        }
        
        async function fetchUkData() {
            const container = document.getElementById('uk-data-container');
            try {
                const [intensityRes, generationRes] = await Promise.all([
                    fetch('https://api.carbonintensity.org.uk/intensity'),
                    fetch('https://api.carbonintensity.org.uk/generation')
                ]);
                const intensityData = await intensityRes.json();
                const generationData = await generationRes.json();
                const intensity = intensityData.data[0].intensity;
                const generationMix = generationData.data.generationmix;
                container.innerHTML = `
                    <div class="card intensity-card ${getIntensityColor(intensity.index).split(' ')[0]}">
                        <h2 class="text-xl font-semibold mb-2">Current UK Carbon Intensity</h2>
                        <p class="text-5xl font-bold">${intensity.actual} <span class="text-2xl font-normal">gCO₂/kWh</span></p>
                        <p class="text-xl capitalize mt-2">${intensity.index}</p>
                    </div>
                    <div class="card">
                        <h2 class="text-xl font-semibold mb-4">Live UK Generation Mix</h2>
                        <div class="space-y-3">
                            ${generationMix.map(fuel => `
                                <div class="w-full">
                                    <div class="flex justify-between mb-1"><span class="font-medium capitalize">${fuel.fuel}</span><span>${fuel.perc}%</span></div>
                                    <div class="w-full bg-gray-200 rounded-full h-4"><div class="bg-blue-600 h-4 rounded-full" style="width: ${fuel.perc}%"></div></div>
                                </div>`).join('')}
                        </div>
                    </div>`;
            } catch (error) {
                console.error("Failed to fetch UK data:", error);
                container.innerHTML = '<div class="card text-center text-red-500"><p>Could not load live UK data.</p></div>';
            }
        }

        document.querySelectorAll('[role="tab"]').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('[role="tab"]').forEach(t => {
                    t.setAttribute('aria-selected', 'false');
                    t.classList.remove('border-blue-600', 'text-blue-600');
                    t.classList.add('border-transparent', 'hover:text-gray-600', 'hover:border-gray-300');
                });
                this.setAttribute('aria-selected', 'true');
                this.classList.add('border-blue-600', 'text-blue-600');
                
                document.querySelectorAll('[role="tabpanel"]').forEach(panel => panel.classList.add('hidden'));
                document.getElementById(this.getAttribute('aria-controls')).classList.remove('hidden');
            });
        });

        fetchPersonalAnalysis();
        fetchUkData();
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """Serves the main HTML page."""
    return render_template_string(HTML_TEMPLATE)

@app.route('/calculate_footprint')
def calculate_footprint():
    """
    API endpoint to fetch user's energy data and national intensity data,
    then calculate the carbon footprint over the last 24 hours.
    """
    try:
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        end_prom = end_time.isoformat("T") + "Z"
        start_prom = start_time.isoformat("T") + "Z"
        
        prom_api_url = f"{PROMETHEUS_URL}/api/v1/query_range"
        params = { 'query': ENERGY_METRIC_QUERY, 'start': start_prom, 'end': end_prom, 'step': '30m' }
        
        print(f"Querying Prometheus: {prom_api_url} with params: {params}")
        
        prom_response = requests.get(prom_api_url, params=params, verify=False)
        prom_response.raise_for_status()
        prom_data = prom_response.json()

        if prom_data['status'] != 'success' or not prom_data['data']['result']:
            raise ValueError("No data returned from Prometheus for the CPU-based energy query. Ensure 'node_cpu_seconds_total' metric is available.")

        usage_by_timestamp = { int(val[0]): float(val[1]) for val in prom_data['data']['result'][0]['values'] }

        start_ci = start_time.strftime('%Y-%m-%dT%H:%MZ')
        end_ci = end_time.strftime('%Y-%m-%dT%H:%MZ')
        ci_api_url = f"https://api.carbonintensity.org.uk/intensity/{start_ci}/{end_ci}"
        
        ci_response = requests.get(ci_api_url)
        ci_response.raise_for_status()
        ci_data = ci_response.json()['data']

        detailed_results = []
        total_footprint_gco2 = 0

        for interval in ci_data:
            interval_dt = datetime.strptime(interval['from'], '%Y-%m-%dT%H:%MZ')
            interval_ts = int(interval_dt.timestamp())
            
            usage_kwh = 0
            for ts, usage in usage_by_timestamp.items():
                if abs(ts - interval_ts) <= 900:
                    usage_kwh = usage
                    break
            
            intensity = interval['intensity']['actual']
            if intensity is None: continue

            footprint_gco2 = usage_kwh * intensity
            total_footprint_gco2 += footprint_gco2
            
            detailed_results.append({
                'from': interval['from'], 'to': interval['to'],
                'usage_kwh': usage_kwh, 'intensity_actual': intensity,
                'intensity_index': interval['intensity']['index'], 'footprint_gco2': footprint_gco2
            })
        
        best_time = min(detailed_results, key=lambda x: x['intensity_actual']) if detailed_results else None
        worst_time = max(detailed_results, key=lambda x: x['intensity_actual']) if detailed_results else None

        return jsonify({
            'total_footprint_kg': total_footprint_gco2 / 1000,
            'details': detailed_results, 'best_time': best_time, 'worst_time': worst_time
        })

    except requests.exceptions.RequestException as e:
        print(f"Error during footprint calculation (Request): {e}")
        return jsonify({'error': f'Failed to connect to an external service: {e}'}), 502
    except (ValueError, KeyError) as e:
        print(f"Error during footprint calculation (Data): {e}")
        return jsonify({'error': f'Data processing error: {e}'}), 500

app.wsgi_app = DispatcherMiddleware(app.wsgi_app, { '/metrics': make_wsgi_app() })

if __name__ == '__main__':
    uk_data_fetch_thread = threading.Thread(target=fetch_and_export_uk_data, daemon=True)
    uk_data_fetch_thread.start()
    app.run(host='0.0.0.0', port=5002)
