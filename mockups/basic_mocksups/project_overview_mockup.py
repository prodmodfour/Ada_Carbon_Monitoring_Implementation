from flask import Flask, render_template_string, jsonify, request
from prometheus_client import make_wsgi_app, Gauge
from werkzeug.middleware.dispatcher import DispatcherMiddleware
import requests
import time
import threading
from datetime import datetime, timedelta
import functools

PROMETHEUS_URL = "https://host-172-16-100-248.nubes.stfc.ac.uk" 

CPU_POWER_IDLE = 50  
CPU_POWER_MAX  = 250 

PROJECT_LABELS = ["CDAaaS", "DDAaaS", "IDAaaS", "all_projects"]

KG_CO2_PER_TREE_MONTH = 1.83  
KM_PER_KG_CO2_CAR = 1 / 0.17069 
FLIGHT_PARIS_DUBAI_KG_CO2 = 550 


ENERGY_METRIC_QUERY_TEMPLATE = """
(
    (
        ({cpu_power_max} - {cpu_power_idle})
        *
        avg(1 - rate(node_cpu_seconds_total{{mode="idle", {project_filter}}}[5m])) by (instance)
        +
        {cpu_power_idle}
    )
) / 1000 
"""

CARBON_INTENSITY = Gauge('carbon_intensity_gco2_per_kwh', 'Current Carbon intensity of electricity in gCO2/kWh')
CARBON_INTENSITY_INDEX = Gauge('carbon_intensity_index', 'Current Carbon intensity index')
GENERATION_MIX = Gauge('generation_mix_percent', 'Percentage of electricity generated by fuel type', ['fuel'])

def fetch_and_export_uk_data():
    """
    Fetches the latest UK-wide carbon intensity and generation mix data
    and updates the Prometheus metrics for export. Runs in a background thread.
    """
    while True:
        try:
            intensity_response = requests.get('https://api.carbonintensity.org.uk/intensity')
            intensity_response.raise_for_status()
            intensity_data = intensity_response.json()['data'][0]['intensity']

            CARBON_INTENSITY.set(intensity_data['actual'])
            index_mapping = {"very low": 1, "low": 2, "moderate": 3, "high": 4, "very high": 5}
            CARBON_INTENSITY_INDEX.set(index_mapping.get(intensity_data['index'], 0))

            generation_response = requests.get('https://api.carbonintensity.org.uk/generation')
            generation_response.raise_for_status()
            generation_mix = generation_response.json()['data']['generationmix']

            for gen_type in generation_mix:
                GENERATION_MIX.labels(fuel=gen_type['fuel']).set(gen_type['perc'])
            print("Successfully updated UK-wide carbon metrics for export.")
        except requests.exceptions.RequestException as e:
            print(f"Error fetching UK-wide data from Carbon Intensity API: {e}")
        

        time.sleep(900)


app = Flask(__name__)


HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Carbon Footprint Analysis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .card {
            background-color: #ffffff;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 2rem auto;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .tooltip-info {
            background-color: rgba(0,0,0,0.7); color: white; padding: 3px 6px;
            border-radius: 4px; font-size: 0.8rem; margin-left: 8px; cursor: help;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">
    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900">Project Overview</h1>
        </header>
        
        <div class="card">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
                <div>
                    <label for="project-select" class="block text-sm font-medium text-gray-700 mb-1">Select Project</label>
                    <select id="project-select" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        {% for project in projects %}
                        <option value="{{ project }}">{{ project }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Time Period</label>
                    <div id="period-select" class="flex items-center space-x-4 bg-gray-100 p-1 rounded-md">
                        <button data-period="day" class="period-btn flex-1 py-1 px-3 text-sm font-medium rounded-md bg-white text-indigo-600 shadow">Day</button>
                        <button data-period="month" class="period-btn flex-1 py-1 px-3 text-sm font-medium rounded-md text-gray-500">Month</button>
                        <button data-period="year" class="period-btn flex-1 py-1 px-3 text-sm font-medium rounded-md text-gray-500">Year</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="analysis-container" class="card">
            <h2 class="text-2xl font-semibold mb-4 flex items-center">
                Analysis Results
                <span class="tooltip-info" title="This is an estimate based on your server's CPU usage, as direct power monitoring is not available.">ESTIMATED</span>
            </h2>
            <div id="analysis-content" class="text-center">
                <p class="text-lg text-gray-500">Select a project and period to begin analysis.</p>
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="card">
                <h3 class="text-xl font-semibold mb-4">Equivalency Metrics</h3>
                <div id="equivalency-metrics" class="space-y-4 text-gray-600">
                    <p>Analysis results will appear here.</p>
                </div>
            </div>
            <div class="card">
                <h3 class="text-xl font-semibold mb-4">Carbon Intensity vs. Your Usage</h3>
                 <div id="analysis-chart-container" class="relative h-64 w-full">
                    <canvas id="analysisChart"></canvas>
                </div>
            </div>
        </div>

        <div class="card mt-6 col-span-1 md:col-span-2">
            <h3 class="text-xl font-semibold mb-4">Improvement & Ranking Analysis</h3>
            <div id="improvement-metrics" class="space-y-4 text-gray-600">
                <p>Improvement analysis will appear here.</p>
            </div>
        </div>

        <footer class="mt-8 text-center text-sm text-gray-500">
            <p>Project usage data from local Prometheus. UK Grid data from <a href="https://carbonintensity.org.uk/" target="_blank" class="text-blue-500 hover:underline">National Grid ESO</a>.</p>
        </footer>
    </div>

    <script>
        let analysisChartInstance;

        // --- UI & EVENT LISTENERS ---
        const projectSelect = document.getElementById('project-select');
        const periodContainer = document.getElementById('period-select');
        const analysisContent = document.getElementById('analysis-content');
        const equivalencyContent = document.getElementById('equivalency-metrics');
        const improvementContent = document.getElementById('improvement-metrics');

        periodContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('period-btn')) {
                document.querySelectorAll('.period-btn').forEach(btn => {
                    btn.classList.remove('bg-white', 'text-indigo-600', 'shadow');
                    btn.classList.add('text-gray-500');
                });
                e.target.classList.add('bg-white', 'text-indigo-600', 'shadow');
                e.target.classList.remove('text-gray-500');
                fetchAnalysis();
            }
        });

        projectSelect.addEventListener('change', fetchAnalysis);
        document.addEventListener('DOMContentLoaded', fetchAnalysis);

        // --- DATA FETCHING & RENDERING ---
        async function fetchAnalysis() {
            const project = projectSelect.value;
            const period = document.querySelector('.period-btn.bg-white').dataset.period;
            
            setLoadingState();

            try {
                const response = await fetch(`/calculate_footprint?project=${project}&period=${period}`);
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                if (data.error) throw new Error(data.error);
                
                renderResults(data);

            } catch (error) {
                console.error("Failed to fetch analysis:", error);
                analysisContent.innerHTML = `<p class="text-red-500 p-4">Could not load analysis: ${error.message}</p>`;
                equivalencyContent.innerHTML = '<p class="text-red-500">Error loading data.</p>';
                improvementContent.innerHTML = '<p class="text-red-500">Error loading data.</p>';
                if (analysisChartInstance) analysisChartInstance.destroy();
            }
        }

        function setLoadingState() {
            analysisContent.innerHTML = '<div class="loader"></div>';
            equivalencyContent.innerHTML = '<p>Calculating...</p>';
            improvementContent.innerHTML = '<p>Calculating...</p>';
        }
        
        function renderResults(data) {
            const totalFootprint = data.total_footprint_kg.toFixed(2);
            const bestTime = data.best_time ? new Date(data.best_time.from).toLocaleString() : 'N/A';
            const worstTime = data.worst_time ? new Date(data.worst_time.from).toLocaleString() : 'N/A';

            analysisContent.innerHTML = `
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                    <div>
                        <p class="text-lg text-gray-600">Total Est. Footprint</p>
                        <p class="text-4xl font-bold">${totalFootprint} <span class="text-2xl">kgCO₂</span></p>
                    </div>
                    <div>
                        <p class="text-lg text-gray-600">Best Time (Lowest Intensity)</p>
                        <p class="text-2xl font-bold text-green-600">${bestTime}</p>
                    </div>
                    <div>
                        <p class="text-lg text-gray-600">Worst Time (Highest Intensity)</p>
                        <p class="text-2xl font-bold text-red-600">${worstTime}</p>
                    </div>
                </div>`;
            
            equivalencyContent.innerHTML = `
                <div class="flex items-center">
                    <span class="text-3xl mr-4">🌳</span>
                    <div>
                        <p class="font-semibold">${data.equivalencies.tree_months.toFixed(1)} tree-months</p>
                        <p class="text-sm">needed to absorb this CO₂.</p>
                    </div>
                </div>
                <div class="flex items-center">
                    <span class="text-3xl mr-4">🚗</span>
                    <div>
                        <p class="font-semibold">${data.equivalencies.car_km.toFixed(1)} km</p>
                        <p class="text-sm">driven by an average passenger car.</p>
                    </div>
                </div>
                <div class="flex items-center">
                     <span class="text-3xl mr-4">✈️</span>
                    <div>
                        <p class="font-semibold">${(data.equivalencies.flights_paris_dubai * 100).toFixed(2)}%</p>
                        <p class="text-sm">of a Paris to Dubai flight per passenger.</p>
                    </div>
                </div>`;
            
            renderImprovementMetrics(data.improvement_metrics);
            renderAnalysisChart(data.details);
        }

        function renderImprovementMetrics(improvements) {
            if (!improvements) {
                improvementContent.innerHTML = '<p>No improvement data available.</p>';
                return;
            }

            let improvementHTML = '';

            if (improvements.potential_savings_kg !== undefined && improvements.potential_savings_kg > 0.01) {
                improvementHTML += `
                    <div class="flex items-center p-3 bg-blue-50 rounded-lg">
                        <span class="text-3xl mr-4">💡</span>
                        <div>
                            <p class="font-semibold">Shift your workload to the greenest times to save up to ${improvements.potential_savings_kg.toFixed(2)} kgCO₂.</p>
                            <p class="text-sm">That's a potential <span class="font-bold text-green-600">${improvements.potential_savings_percent.toFixed(0)}%</span> reduction for this period.</p>
                        </div>
                    </div>`;
            }

            if (improvements.monthly_comparison_percent !== undefined) {
                const isPositive = improvements.monthly_comparison_percent > 0;
                const comparison_class = isPositive ? 'text-red-600' : 'text-green-600';
                const comparison_text = isPositive ? 'more' : 'less';
                improvementHTML += `
                    <div class="flex items-center p-3 bg-gray-50 rounded-lg">
                        <span class="text-3xl mr-4">📅</span>
                        <div>
                            <p class="font-semibold">This is <span class="${comparison_class}">${Math.abs(improvements.monthly_comparison_percent).toFixed(0)}% ${comparison_text}</span> carbon than the previous month.</p>
                        </div>
                    </div>`;
            }

            if (improvements.rank !== undefined) {
                improvementHTML += `
                    <div class="flex items-center p-3 bg-gray-50 rounded-lg">
                        <span class="text-3xl mr-4">🏆</span>
                        <div>
                            <p class="font-semibold">This project has the #${improvements.rank} highest carbon footprint out of ${improvements.total_projects} projects.</p>
                        </div>
                    </div>`;
            }
            
            if (improvements.comparison_to_average_percent !== undefined && improvements.total_projects > 1) {
                const isHigher = improvements.comparison_to_average_percent > 0;
                const avg_comparison_class = isHigher ? 'text-red-600' : 'text-green-600';
                const avg_comparison_text = isHigher ? 'higher' : 'lower';
                 improvementHTML += `
                    <div class="flex items-center p-3 bg-gray-50 rounded-lg">
                        <span class="text-3xl mr-4">📊</span>
                        <div>
                            <p class="font-semibold">Its footprint is <span class="${avg_comparison_class}">${Math.abs(improvements.comparison_to_average_percent).toFixed(0)}% ${avg_comparison_text}</span> than the average of all projects.</p>
                        </div>
                    </div>`;
            }
            
            improvementContent.innerHTML = improvementHTML || '<p>No specific improvement actions identified for this period.</p>';
        }

        function renderAnalysisChart(data) {
            const ctx = document.getElementById('analysisChart').getContext('2d');
            if (analysisChartInstance) analysisChartInstance.destroy();
            
            const labels = data.map(d => {
                const date = new Date(d.from);
                return date.toLocaleDateString([], { month: 'short', day: 'numeric' }) + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            });

            analysisChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Your Estimated Carbon Footprint (gCO₂)',
                        data: data.map(d => d.footprint_gco2.toFixed(2)),
                        backgroundColor: 'rgba(79, 70, 229, 0.7)',
                        borderColor: 'rgba(79, 70, 229, 1)',
                        borderWidth: 1,
                        yAxisID: 'y'
                    }, {
                        label: 'UK Carbon Intensity (gCO₂/kWh)',
                        data: data.map(d => d.intensity_actual),
                        type: 'line',
                        borderColor: '#f97316',
                        backgroundColor: 'transparent',
                        yAxisID: 'y1',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    scales: {
                        y: { type: 'linear', display: true, position: 'left', title: { display: true, text: 'Your Footprint (gCO₂)' } },
                        y1: { type: 'linear', display: true, position: 'right', title: { display: true, text: 'UK Intensity (gCO₂/kWh)' }, grid: { drawOnChartArea: false } }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) label += ': ';
                                    if (context.parsed.y !== null) label += context.parsed.y;
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>
"""

@functools.lru_cache(maxsize=128)
def get_carbon_intensity_data(start_str, end_str):
    """Cached function to fetch carbon intensity data for a given period."""
    ci_api_url = f"https://api.carbonintensity.org.uk/intensity/{start_str}/{end_str}"
    print(f"Fetching Carbon Intensity data: {ci_api_url}")
    ci_response = requests.get(ci_api_url)
    ci_response.raise_for_status()
    return ci_response.json()['data']

def _get_footprint_for_project_period(project, start_time, end_time, step):
    """Helper function to calculate total footprint for a given project and period."""
    start_prom = start_time.isoformat("T") + "Z"
    end_prom = end_time.isoformat("T") + "Z"

    project_filter = f'cloud_project_name="{project}"' if project != 'all_projects' else ''
    energy_query = ENERGY_METRIC_QUERY_TEMPLATE.format(
        cpu_power_max=CPU_POWER_MAX,
        cpu_power_idle=CPU_POWER_IDLE,
        project_filter=project_filter
    )
    
    prom_api_url = f"{PROMETHEUS_URL}/api/v1/query_range"
    params = {'query': energy_query, 'start': start_prom, 'end': end_prom, 'step': step}
    
    prom_response = requests.get(prom_api_url, params=params, verify=False)
    prom_response.raise_for_status()
    prom_data = prom_response.json()

    if prom_data['status'] != 'success' or not prom_data['data']['result']:
        return 0, [], None 

    usage_by_timestamp = {}
    for result in prom_data['data']['result']:
        for value in result['values']:
            ts, val = int(value[0]), float(value[1])
            usage_by_timestamp[ts] = usage_by_timestamp.get(ts, 0) + val

    start_ci = start_time.strftime('%Y-%m-%dT%H:%MZ')
    end_ci = end_time.strftime('%Y-%m-%dT%H:%MZ')
    ci_data = get_carbon_intensity_data(start_ci, end_ci)

    detailed_results = []
    total_footprint_gco2 = 0
    sorted_usage_ts = sorted(usage_by_timestamp.keys())
    if not sorted_usage_ts:
        return 0, [], ci_data

    for interval in ci_data:
        interval_dt = datetime.strptime(interval['from'], '%Y-%m-%dT%H:%MZ')
        interval_ts = int(interval_dt.timestamp())
        
        closest_ts = min(sorted_usage_ts, key=lambda x: abs(x - interval_ts))
        usage_kwh = usage_by_timestamp.get(closest_ts, 0)
        
        intensity = interval['intensity'].get('actual')
        if intensity is None: continue

        footprint_gco2 = usage_kwh * intensity
        total_footprint_gco2 += footprint_gco2
        
        detailed_results.append({
            'from': interval['from'], 'to': interval['to'],
            'usage_kwh': usage_kwh, 'intensity_actual': intensity,
            'footprint_gco2': footprint_gco2
        })
    
    return total_footprint_gco2 / 1000, detailed_results, ci_data


@app.route('/')
def index():
    """Serves the main HTML page."""
    return render_template_string(HTML_TEMPLATE, projects=PROJECT_LABELS)

@app.route('/calculate_footprint')
def calculate_footprint():
    """
    API endpoint to fetch energy data, carbon intensity, and calculate
    the carbon footprint and improvement metrics.
    """
    project = request.args.get('project', 'all_projects')
    period = request.args.get('period', 'day')

    try:
        end_time = datetime.utcnow()
        if period == 'year':
            start_time = end_time - timedelta(days=365)
            step = '1d'
        elif period == 'month':
            start_time = end_time - timedelta(days=30)
            step = '6h'
        else: 
            start_time = end_time - timedelta(days=1)
            step = '30m'

        total_footprint_kg, detailed_results, ci_data = _get_footprint_for_project_period(project, start_time, end_time, step)
        
        if not detailed_results:
             raise ValueError("No data available for the selected project and period.")

        improvement_metrics = {}
        
        total_kwh = sum(d['usage_kwh'] for d in detailed_results)
        valid_intensities = [d['intensity_actual'] for d in detailed_results if d['intensity_actual'] is not None]
        if valid_intensities:
            min_intensity = min(valid_intensities)
            potential_footprint_kg = (total_kwh * min_intensity) / 1000
            potential_savings_kg = total_footprint_kg - potential_footprint_kg
            improvement_metrics['potential_savings_kg'] = potential_savings_kg
            improvement_metrics['potential_savings_percent'] = (potential_savings_kg / total_footprint_kg * 100) if total_footprint_kg > 0 else 0

        if period == 'month':
            prev_start_time = start_time - timedelta(days=30)
            prev_end_time = start_time
            prev_footprint_kg, _, _ = _get_footprint_for_project_period(project, prev_start_time, prev_end_time, step)
            if prev_footprint_kg > 0:
                monthly_change = ((total_footprint_kg - prev_footprint_kg) / prev_footprint_kg) * 100
                improvement_metrics['monthly_comparison_percent'] = monthly_change


        if project != 'all_projects':
            all_projects = [p for p in PROJECT_LABELS if p != 'all_projects']
            project_footprints = []
            for p in all_projects:
                footprint, _, _ = _get_footprint_for_project_period(p, start_time, end_time, step)
                project_footprints.append({'project': p, 'footprint': footprint})
            
            project_footprints.sort(key=lambda x: x['footprint'], reverse=True)
            
            try:
                rank = [i for i, p in enumerate(project_footprints) if p['project'] == project][0] + 1
                improvement_metrics['rank'] = rank
                improvement_metrics['total_projects'] = len(all_projects)
            except IndexError:
                pass 

            total_average_footprint = sum(p['footprint'] for p in project_footprints)
            if len(all_projects) > 1:
                average_footprint = total_average_footprint / len(all_projects)
                if average_footprint > 0:
                    comparison_to_avg = ((total_footprint_kg - average_footprint) / average_footprint) * 100
                    improvement_metrics['comparison_to_average_percent'] = comparison_to_avg
        
        equivalencies = {
            "tree_months": total_footprint_kg / KG_CO2_PER_TREE_MONTH,
            "car_km": total_footprint_kg * KM_PER_KG_CO2_CAR,
            "flights_paris_dubai": total_footprint_kg / FLIGHT_PARIS_DUBAI_KG_CO2
        }

        best_time = min(detailed_results, key=lambda x: x['intensity_actual']) if detailed_results else None
        worst_time = max(detailed_results, key=lambda x: x['intensity_actual']) if detailed_results else None

        return jsonify({
            'total_footprint_kg': total_footprint_kg,
            'details': detailed_results, 
            'best_time': best_time, 
            'worst_time': worst_time,
            'equivalencies': equivalencies,
            'improvement_metrics': improvement_metrics
        })

    except requests.exceptions.RequestException as e:
        print(f"Error during footprint calculation (Request): {e}")
        return jsonify({'error': f'Failed to connect to an external service: {e}'}), 502
    except (ValueError, KeyError) as e:
        print(f"Error during footprint calculation (Data): {e}")
        return jsonify({'error': f'Data processing error: {e}'}), 500


app.wsgi_app = DispatcherMiddleware(app.wsgi_app, { '/metrics': make_wsgi_app() })

if __name__ == '__main__':
    uk_data_fetch_thread = threading.Thread(target=fetch_and_export_uk_data, daemon=True)
    uk_data_fetch_thread.start()
    
    app.run(host='0.0.0.0', port=5001, debug=False)