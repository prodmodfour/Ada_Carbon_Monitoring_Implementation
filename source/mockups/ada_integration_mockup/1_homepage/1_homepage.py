from flask import Flask, render_template_string, jsonify
from prometheus_client import make_wsgi_app, Gauge
from werkzeug.middleware.dispatcher import DispatcherMiddleware
import requests
import time
import threading
from datetime import datetime, timedelta
import warnings


from requests.packages.urllib3.exceptions import InsecureRequestWarning
warnings.simplefilter('ignore', InsecureRequestWarning)

# --- Configuration ---
PROMETHEUS_URL = "https://host-172-16-100-248.nubes.stfc.ac.uk"
CPU_POWER_IDLE = 50  
CPU_POWER_MAX = 250  


ENERGY_METRIC_QUERY = f"""
    (
        (
            ({CPU_POWER_MAX} - {CPU_POWER_IDLE})
            *
            avg(1 - rate(node_cpu_seconds_total{{mode="idle"}}[5m]))
        )
        +
        {CPU_POWER_IDLE}
    ) / 1000 
"""

CARBON_INTENSITY = Gauge('carbon_intensity_gco2_per_kwh', 'Current Carbon intensity of electricity in gCO2/kWh')
CARBON_INTENSITY_INDEX = Gauge('carbon_intensity_index', 'Current Carbon intensity index')
GENERATION_MIX = Gauge('generation_mix_percent', 'Percentage of electricity generated by fuel type', ['fuel'])


def fetch_and_export_uk_data():
    """
    Fetches the latest UK-wide carbon intensity and generation mix data
    and updates the Prometheus metrics for export. Runs in a background thread.
    """
    while True:
        try:
            intensity_response = requests.get('https://api.carbonintensity.org.uk/intensity')
            intensity_response.raise_for_status()
            intensity_data = intensity_response.json()['data'][0]['intensity']

            CARBON_INTENSITY.set(intensity_data['actual'])
            index_mapping = {"very low": 1, "low": 2, "moderate": 3, "high": 4, "very high": 5}
            CARBON_INTENSITY_INDEX.set(index_mapping.get(intensity_data['index'], 0))

            generation_response = requests.get('https://api.carbonintensity.org.uk/generation')
            generation_response.raise_for_status()
            generation_mix = generation_response.json()['data']['generationmix']

            for gen_type in generation_mix:
                GENERATION_MIX.labels(fuel=gen_type['fuel']).set(gen_type['perc'])
            print("Successfully updated UK-wide carbon metrics for export.")
        except requests.exceptions.RequestException as e:
            print(f"Error fetching UK-wide data from Carbon Intensity API: {e}")
        
        time.sleep(900)  


app = Flask(__name__)


HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ada | Carbon Aware Computing</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f8fafc; }
        .card {
            background-color: #ffffff;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            border: 1px solid #e5e7eb;
            transition: all 0.2s ease-in-out;
        }
        .main-card {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
            text-align: center;
            color: #4b5563;
        }
        .main-card-icon {
            height: 4rem;
            width: 4rem;
            margin-bottom: 1rem;
            color: #374151;
        }
        .main-card-title {
            font-weight: 600;
            color: #1f2937;
        }
        .main-card.beta { position: relative; }
        .beta-tag {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background-color: #facc15;
            color: #422006;
            padding: 0.125rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        .intensity-card { border-left: 5px solid; }
        .very-low { border-color: #22c55e; } .low { border-color: #84cc16; }
        .moderate { border-color: #facc15; } .high { border-color: #f97316; }
        .very-high { border-color: #ef4444; }
        .tooltip-info {
            background-color: rgba(0,0,0,0.7);
            color: white;
            padding: 3px 6px;
            border-radius: 4px;
            font-size: 0.75rem;
            margin-left: 8px;
            cursor: help;
        }
        .chart-container { position: relative; height: 350px; width: 100%; }
        .stfc-header {
             display: flex;
             justify-content: space-between;
             align-items: center;
             padding: 1rem 2rem;
             background-color: #fff;
             border-bottom: 1px solid #e5e7eb;
        }
        .stfc-logo {
            font-size: 1rem;
            font-weight: 700;
            letter-spacing: -0.05em;
            color: #1f2937;
        }
        .stfc-links a {
            margin-left: 1.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: #4b5563;
        }
    </style>
</head>
<body class="text-gray-800">
    <header class="stfc-header">
        <div class="flex items-center">
            <div class="stfc-logo">
                <span class="block">UKRI</span>
                <span class="block">Science and Technology</span>
                <span class="block">Facilities Council</span>
            </div>
        </div>
        <nav class="stfc-links">
            <a href="#">Scientific Computing</a>
            <a href="#">Ada Lovelace Centre</a>
        </nav>
    </header>

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">

        <section class="flex flex-col md:flex-row items-center mb-12">
            <svg class="w-24 h-24 md:w-32 md:h-32 mr-8 text-gray-700" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"><ellipse cx="12" cy="12" rx="10" ry="3.5"></ellipse><ellipse cx="12" cy="12" rx="10" ry="3.5" transform="rotate(60 12 12)"></ellipse><ellipse cx="12" cy="12" rx="10" ry="3.5" transform="rotate(120 12 12)"></ellipse><circle cx="12" cy="12" r="1.5" fill="currentColor"></circle></svg>
            <div>
                <h1 class="text-5xl font-bold text-gray-800">Ada</h1>
                <p class="mt-2 text-lg text-gray-600 max-w-3xl">
                    Welcome to Ada (previously known as DAaaS). This service enables remote data access and creation of Workspaces, providing all necessary software, data, and compute resources for your analysis. Ada offers access to the data generated by the ISIS Neutron and Muon Source and the Central Laser Facility (CLF). We also host various training courses, giving course attendees access to Workspaces for practical experience using software for analysis.
                </p>
            </div>
        </section>

        <section class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6 mb-12">
            <div class="card main-card">
                <img src="https://www.stfc.ac.uk/wp-content/themes/stfc-theme/dist/images/stfc-logo-black-stacked-2.svg" alt="STFC Logo" class="main-card-icon" />
                <span class="main-card-title">ISIS Neutron and Muon Source</span>
                <p class="text-sm mt-2">Analyse ISIS Experiment Data</p>
            </div>
            <div class="card main-card">
                <img src="https://www.stfc.ac.uk/wp-content/themes/stfc-theme/dist/images/stfc-logo-black-stacked-2.svg" alt="STFC Logo" class="main-card-icon" />
                <span class="main-card-title">Central Laser Facility</span>
                <p class="text-sm mt-2">Analyse CLF Experiment Data</p>
            </div>
            <div class="card main-card beta">
                <div class="beta-tag">Beta</div>
                <img src="https://www.diamond.ac.uk/dam/jcr:15849942-da44-4e20-9943-294bf147d341/diamond-logo-1.svg" alt="Diamond Logo" class="main-card-icon p-2" />
                <span class="main-card-title">Diamond</span>
                <p class="text-sm mt-2">Analyse Diamond Experiment Data</p>
            </div>
            <div class="card main-card">
                <svg class="main-card-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5"><path d="M12 14l9-5-9-5-9 5 9 5z"></path><path d="M12 14l6.16-3.422A12.003 12.003 0 0112 21a12.003 12.003 0 01-6.16-10.422L12 14z"></path><path d="M3.27 6.96L12 12.01l8.73-5.05L12 2 3.27 6.96z"></path></svg>
                <span class="main-card-title">Training</span>
                <p class="text-sm mt-2">Host your own training courses.</p>
            </div>
            <div class="card main-card">
                <svg class="main-card-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M6.4 17.5L3 12.25 6.4 7H17.6L21 12.25 17.6 17.5H6.4z" /><path stroke-linecap="round" stroke-linejoin="round" d="M10 14.25l-1.5-1.5L10 11.25M14 14.25l1.5-1.5L14 11.25" /></svg>
                <span class="main-card-title">Developer</span>
                <p class="text-sm mt-2">Use our platform to develop and test.</p>
            </div>
        </section>

        <section>
            <h2 class="text-3xl font-bold mb-6 text-center border-t pt-8 border-gray-200">Carbon Usage & Forecast</h2>
            <div class="grid grid-cols-1 lg:grid-cols-5 gap-6">
                
                <div class="lg:col-span-2 space-y-6">
                    <div id="uk-data-container" class="card p-6">
                        <div class="text-center"><p class="text-lg">Loading live UK grid data...</p></div>
                    </div>
                    <div class="card p-6">
                         <h2 class="text-xl font-semibold mb-2">48-Hour Intensity Forecast</h2>
                         <div id="forecast-chart-container" class="chart-container mt-4">
                            <canvas id="forecastChart"></canvas>
                         </div>
                    </div>
                </div>

                <div class="lg:col-span-3 card p-6">
                    <h2 class="text-2xl font-semibold mb-2 flex items-center">
                        Your 24-Hour Carbon Footprint
                        <span class="tooltip-info" title="This is an estimate based on your server's CPU usage, as direct power monitoring is not available.">ESTIMATED</span>
                    </h2>
                    <div id="analysis-content" class="text-center my-4"><p class="text-lg">Loading your usage data...</p></div>
                    <div id="analysis-chart-container" class="chart-container">
                        <canvas id="analysisChart"></canvas>
                    </div>
                </div>

            </div>
        </section>

        <footer class="mt-12 text-center text-sm text-gray-500">
            <p>Personal usage data from your Prometheus instance. UK Grid data from <a href="https://carbonintensity.org.uk/" target="_blank" class="text-blue-600 hover:underline">National Grid ESO</a>.</p>
            <p>Exporter metrics available at <a href="/metrics" class="text-blue-600 hover:underline">/metrics</a>.</p>
        </footer>
    </div>

    <script>
        let analysisChartInstance;
        let forecastChartInstance;

        function getIntensityColor(index, opacity = 1) {
            const colors = {
                "very low": `rgba(34, 197, 94, ${opacity})`, "low": `rgba(132, 204, 22, ${opacity})`,
                "moderate": `rgba(250, 204, 21, ${opacity})`, "high": `rgba(249, 115, 22, ${opacity})`,
                "very high": `rgba(239, 68, 68, ${opacity})`
            };
            return colors[index] || `rgba(156, 163, 175, ${opacity})`;
        }
        
        function renderAnalysisChart(data) {
            const ctx = document.getElementById('analysisChart').getContext('2d');
            if (analysisChartInstance) analysisChartInstance.destroy();
            analysisChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(d => new Date(d.from)),
                    datasets: [{
                        label: 'Est. Carbon Footprint (gCO₂)',
                        data: data.map(d => d.footprint_gco2.toFixed(2)),
                        backgroundColor: data.map(d => getIntensityColor(d.intensity_index, 0.7)),
                        borderColor: data.map(d => getIntensityColor(d.intensity_index, 1)),
                        borderWidth: 1,
                        yAxisID: 'y'
                    }, {
                        label: 'UK Carbon Intensity (gCO₂/kWh)',
                        data: data.map(d => d.intensity_actual),
                        type: 'line',
                        borderColor: '#4f46e5',
                        backgroundColor: 'transparent',
                        yAxisID: 'y1',
                        tension: 0.3,
                        pointRadius: 0,
                    }]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                     scales: {
                        x: { type: 'time', time: { unit: 'hour', displayFormats: { hour: 'HH:mm' } }, grid: { display: false } },
                        y: { type: 'linear', display: true, position: 'left', title: { display: true, text: 'Your Footprint (gCO₂)' } },
                        y1: { type: 'linear', display: true, position: 'right', title: { display: true, text: 'UK Intensity (gCO₂/kWh)' }, grid: { drawOnChartArea: false } }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) label += ': ';
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y;
                                        if (context.dataset.yAxisID === 'y') label += ' gCO₂';
                                        if (context.dataset.yAxisID === 'y1') label += ' gCO₂/kWh';
                                    }
                                    const dataPoint = data[context.dataIndex];
                                    if (context.dataset.yAxisID === 'y') {
                                        return [label, `Est. Usage: ${dataPoint.usage_kwh.toFixed(4)} kWh`];
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }
        
        function renderForecastChart(data) {
            const ctx = document.getElementById('forecastChart').getContext('2d');
            const labels = data.map(d => new Date(d.from));
            const forecastValues = data.map(d => d.intensity.forecast);
            
            const pointBackgroundColors = data.map(d => getIntensityColor(d.intensity.index, 1));

            if(forecastChartInstance) forecastChartInstance.destroy();
            forecastChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Forecast Intensity (gCO₂/kWh)',
                        data: forecastValues,
                        borderColor: '#4f46e5',
                        backgroundColor: '#c7d2fe',
                        tension: 0.2,
                        fill: true,
                        pointBackgroundColor: pointBackgroundColors,
                        pointRadius: 3,
                        pointHoverRadius: 5
                    }]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    scales: {
                        x: { type: 'time', time: { unit: 'hour' }, grid: { display: false } },
                        y: { title: { display: true, text: 'gCO₂/kWh' } }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                title: function(context) {
                                    const date = new Date(context[0].parsed.x);
                                    return date.toLocaleString([], { weekday: 'short', hour: 'numeric', minute: '2-digit' });
                                },
                                label: function(context) {
                                    const dataPoint = data[context.dataIndex];
                                    return [
                                        `Forecast: ${dataPoint.intensity.forecast} gCO₂/kWh`,
                                        `Index: ${dataPoint.intensity.index}`
                                    ];
                                }
                            }
                        }
                    }
                }
            });
        }

        async function fetchPersonalAnalysis() {
            const contentEl = document.getElementById('analysis-content');
            try {
                const response = await fetch('/calculate_footprint');
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to fetch analysis data.');
                }
                const data = await response.json();
                if (data.error) throw new Error(data.error);

                const totalFootprint = data.total_footprint_kg.toFixed(3);
                const bestTime = data.best_time ? new Date(data.best_time.from).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'N/A';
                const worstTime = data.worst_time ? new Date(data.worst_time.from).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'N/A';

                contentEl.innerHTML = `
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                        <div>
                            <p class="text-base text-gray-500">Total Est. Footprint (24h)</p>
                            <p class="text-3xl font-bold">${totalFootprint} <span class="text-xl font-medium">kgCO₂e</span></p>
                        </div>
                        <div>
                            <p class="text-base text-gray-500">Best Time (Low Carbon)</p>
                            <p class="text-3xl font-bold text-green-600">${bestTime}</p>
                        </div>
                        <div>
                            <p class="text-base text-gray-500">Worst Time (High Carbon)</p>
                            <p class="text-3xl font-bold text-red-600">${worstTime}</p>
                        </div>
                    </div>`;
                renderAnalysisChart(data.details);
            } catch (error) {
                console.error("Failed to fetch personal analysis:", error);
                contentEl.innerHTML = `<p class="text-red-500 text-sm">Could not load your analysis: ${error.message}<br><br>This usually means the Prometheus query failed. Please ensure the Prometheus server at ${PROMETHEUS_URL} is accessible and has the 'node_cpu_seconds_total' metric.</p>`;
                document.getElementById('analysis-chart-container').style.display = 'none';
            }
        }
        
        async function fetchUkData() {
            const container = document.getElementById('uk-data-container');
            try {
                const [intensityRes, generationRes] = await Promise.all([
                    fetch('https://api.carbonintensity.org.uk/intensity'),
                    fetch('https://api.carbonintensity.org.uk/generation')
                ]);
                if (!intensityRes.ok || !generationRes.ok) throw new Error("API request failed.");

                const intensityData = await intensityRes.json();
                const generationData = await generationRes.json();
                const intensity = intensityData.data[0].intensity;
                const generationMix = generationData.data.generationmix;
                
                // Sort generation mix by percentage
                generationMix.sort((a, b) => b.perc - a.perc);

                container.innerHTML = `
                    <div class="intensity-card p-4 rounded ${getIntensityColor(intensity.index).split(' ')[0]}">
                        <h2 class="text-xl font-semibold mb-1">Live UK Carbon Intensity</h2>
                        <p class="text-5xl font-bold">${intensity.actual} <span class="text-2xl font-normal">gCO₂/kWh</span></p>
                        <p class="text-xl capitalize mt-1">${intensity.index}</p>
                    </div>
                    <div class="mt-4">
                        <h2 class="text-xl font-semibold mb-3">Live UK Generation Mix</h2>
                        <div class="space-y-3">
                            ${generationMix.map(fuel => `
                                <div class="w-full">
                                    <div class="flex justify-between mb-1"><span class="font-medium capitalize text-sm">${fuel.fuel}</span><span class="text-sm">${fuel.perc}%</span></div>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5"><div class="bg-indigo-600 h-2.5 rounded-full" style="width: ${fuel.perc}%"></div></div>
                                </div>`).join('')}
                        </div>
                    </div>`;
            } catch (error) {
                console.error("Failed to fetch UK data:", error);
                container.innerHTML = '<div class="text-center text-red-500 p-4"><p>Could not load live UK grid data.</p></div>';
            }
        }
        
        async function fetchAndRenderForecast() {
            const container = document.getElementById('forecast-chart-container');
            try {
                const response = await fetch('/forecast');
                if (!response.ok) throw new Error('Failed to fetch forecast data from server.');
                const data = await response.json();
                renderForecastChart(data);
            } catch (error) {
                console.error("Failed to fetch forecast:", error);
                container.innerHTML = '<p class="text-red-500 text-center">Could not load forecast data.</p>';
            }
        }

        // Fetch all data on page load
        document.addEventListener('DOMContentLoaded', () => {
            fetchPersonalAnalysis();
            fetchUkData();
            fetchAndRenderForecast();
        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """Serves the main HTML page."""
    return render_template_string(HTML_TEMPLATE)

@app.route('/calculate_footprint')
def calculate_footprint():
    """
    API endpoint to fetch user's energy data and national intensity data,
    then calculate the carbon footprint over the last 24 hours.
    """
    try:
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=1)
        

        end_prom = end_time.isoformat("T") + "Z"
        start_prom = start_time.isoformat("T") + "Z"
        
        prom_api_url = f"{PROMETHEUS_URL}/api/v1/query_range"
        params = {'query': ENERGY_METRIC_QUERY, 'start': start_prom, 'end': end_prom, 'step': '30m'}
        
        print(f"Querying Prometheus: {prom_api_url} with params: {params}")
        prom_response = requests.get(prom_api_url, params=params, verify=False, timeout=10)
        prom_response.raise_for_status()
        prom_data = prom_response.json()

        if prom_data['status'] != 'success' or not prom_data['data']['result']:
            raise ValueError("No data returned from Prometheus. Ensure 'node_cpu_seconds_total' metric is available.")


        usage_by_timestamp = {int(val[0]): float(val[1]) for val in prom_data['data']['result'][0]['values']}

        start_ci = start_time.strftime('%Y-%m-%dT%H:%MZ')
        end_ci = end_time.strftime('%Y-%m-%dT%H:%MZ')
        ci_api_url = f"https://api.carbonintensity.org.uk/intensity/{start_ci}/{end_ci}"
        
        ci_response = requests.get(ci_api_url, timeout=10)
        ci_response.raise_for_status()
        ci_data = ci_response.json()['data']

        detailed_results = []
        total_footprint_gco2 = 0


        for interval in ci_data:
            interval_dt = datetime.strptime(interval['from'], '%Y-%m-%dT%H:%MZ')
            interval_ts = int(interval_dt.timestamp())

            matched_ts = min(usage_by_timestamp.keys(), key=lambda ts: abs(ts - interval_ts))
            if abs(matched_ts - interval_ts) <= 900:
                usage_kwh = usage_by_timestamp[matched_ts] * 0.5 
            else:
                usage_kwh = 0

            intensity = interval['intensity']['actual']
            if intensity is None: continue

            footprint_gco2 = usage_kwh * intensity
            total_footprint_gco2 += footprint_gco2
            
            detailed_results.append({
                'from': interval['from'], 'to': interval['to'],
                'usage_kwh': usage_kwh, 'intensity_actual': intensity,
                'intensity_index': interval['intensity']['index'], 'footprint_gco2': footprint_gco2
            })
        

        active_periods = [r for r in detailed_results if r['usage_kwh'] > 0]
        best_time = min(active_periods, key=lambda x: x['intensity_actual']) if active_periods else None
        worst_time = max(active_periods, key=lambda x: x['intensity_actual']) if active_periods else None

        return jsonify({
            'total_footprint_kg': total_footprint_gco2 / 1000,
            'details': detailed_results, 'best_time': best_time, 'worst_time': worst_time
        })

    except requests.exceptions.RequestException as e:
        print(f"Error during footprint calculation (Request): {e}")
        return jsonify({'error': f'Failed to connect to an external service: {e}'}), 502
    except (ValueError, KeyError) as e:
        print(f"Error during footprint calculation (Data): {e}")
        return jsonify({'error': f'Data processing error: {e}'}), 500

@app.route('/forecast')
def get_forecast():
    now = datetime.utcnow().replace(minute=0, second=0, microsecond=0)
    start = now.isoformat(timespec="minutes") + "Z"   

    url = f"https://api.carbonintensity.org.uk/intensity/{start}/fw48h"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        return r.json()["data"]          
    except requests.RequestException as e:
        print(f"API error: {e} — response was {r.text}")
        return jsonify({'error': f'Failed to connect to an external service: {e}'}), 502


app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {'/metrics': make_wsgi_app()})


if __name__ == '__main__':

    uk_data_fetch_thread = threading.Thread(target=fetch_and_export_uk_data, daemon=True)
    uk_data_fetch_thread.start()

    app.run(host='0.0.0.0', port=5003, debug=True)